# # # Packages used # # #
install.packages('tidyverse')
install.packages('osfr')
install.packages('readxl')
install.packages('psych')
install.packages('report')
install.packages('effsize')
install.packages('jmv')
install.packages('reshape2')
install.packages('Rmisc')
install.packages('ggstatsplot')
install.packages("ggplot2")
install.packages('ggpubr')

###########################################
###       1. OPENING THE DATASET        ###
###########################################

{
 require(tidyverse)
 require(osfr)
 require(readxl)
  dir <- getwd()
  setwd(dir)
    osfr::osf_retrieve_node("c9d2a") %>% 
    osfr::osf_ls_files() %>%
    osfr::osf_download(conflicts = "skip")
  ds   <- "BBS_ds_clean.xlsx"
  Data <- readxl::read_excel(ds)
} 

###########################################
###         2. DESCRIPTIVES             ###
###########################################

# # # # 2.1. re-coding variables # # # # #
{

  # Sex 
  {
   Data$Sex[Data$Sex == "1"] <- "Male"
   Data$Sex[Data$Sex == "2"] <- "Female"
   Data$Sex[Data$Sex == "3"] <- "Other"

   Data$Sex_Other[Data$Sex_Other == "não binário"] <- "non-binary"
   }
 
  # Education 
  {
   Data$Education[Data$Education == "1"] <- "Primary Education (unfinished)"
   Data$Education[Data$Education == "2"] <- "Primary Education (finished)"
   Data$Education[Data$Education == "3"] <- "Secondary Education (unfinished)"
   Data$Education[Data$Education == "4"] <- "Secondary Education (finished)"
   Data$Education[Data$Education == "5"] <- "Undergraduation (unfinished)"
   Data$Education[Data$Education == "6"] <- "Undergraduation (finished)"
   Data$Education[Data$Education == "7"] <- "Graduation (unfinished)"
   Data$Education[Data$Education == "8"] <- "Graduation (finished)"
   }
 # Family income
 {
  Data$Family_Income[Data$Family_Income == "1"] <- "None"
  Data$Family_Income[Data$Family_Income == "2"] <- "Up to 1 minimum wage (R$ 1,045)"
  Data$Family_Income[Data$Family_Income == "3"] <- "From 1 to 3 minimum wages (R$ 1,045.01 to R$ 3,135.00)"
  Data$Family_Income[Data$Family_Income == "4"] <- "From 3 to 6 minimum wages (R$ 3,135.01 to R$ 6,270.00)"
  Data$Family_Income[Data$Family_Income == "5"] <- "From 6 to 9 minimum wages (R$ 6,270.01 to R$ 9.405,00)"
  Data$Family_Income[Data$Family_Income == "6"] <- "From 9 to 12 minimum wages (R$ 9,405.01 to R$ 12,540.00)"
  Data$Family_Income[Data$Family_Income == "7"] <- "From 12 to 15 minimum wages (R$ 12,540.01 to R$ 15,675.00)"
  Data$Family_Income[Data$Family_Income == "8"] <- "More than 15 minimum wages (more than R$ 15,675.01)"
  }
 # Area
 {
  Data$Area[Data$Area == "1"] <- "Mathematics"
  Data$Area[Data$Area == "2"] <- "Human Sciences"
  Data$Area[Data$Area == "3"] <- "Biological Sciences"
  Data$Area[Data$Area == "4"] <- "Health Sciences"
  Data$Area[Data$Area == "5"] <- "Arts"
  Data$Area[Data$Area == "6"] <- "Not enrolled"
  }

View(Data)
}

# # # # 2.2. Descriptive analysis # # # # #

{require(magrittr)
 require(report)
 require(gtsummary)
 require(flextable)}

summary(Data$Age)          # Age
report(Data$Age)           # Age
report(Data$Sex)           # Sex
report(Data$Education)     # Education
report(Data$Area)          # Area of knowledge
report(Data$Family_Income) # Family income
summary (Data$Ppl_FI)      # How many people live with that income
report(Data$Ppl_FI)        # How many people live with that income


# Table with demographic variables

demographics_table <- Data %>%
                      select(Age,Sex,
                             Sex_Other,
                             Education,
                             Family_Income,
                             Area) %>% 
                      tbl_summary(statistic = 
                             list(all_continuous() ~ "{mean} ({sd})"))

print(demographics_table)

# Saving demographics on a .docx

demographics_table %>% 
gtsummary::as_flex_table() %>%
flextable::save_as_docx(path = ".../descriptives.docx") #Remember - YOUR directory!


###########################################
###         3. HYPOTHESIS TEST          ###
###########################################

# The following codes were obtained from the work of Chandrashekar et al., (2021). Their osf project is 
# https://osf.io/3df5s/ 
# Minor adaptation were made to fit our data
# Variable description are available in the README file

# # # # 3.1. Calculate The mean scores # # # # #

Data$BS_Mean <- rowMeans(Data[,
                       c("self_ego",
                         "self_IP",
                         "self_DRP",
                         "self_AEC",
                         "self_midia",
                         "self_halo",
                         "self_desc",
                         "self_rac")],na.rm=TRUE)

Data$PSS_Mean <- rowMeans(Data[,
                         c("SELF_proc",
                           "SELF_RF",
                           "SELF_PO")],na.rm=TRUE)

Data$BO_Mean <- rowMeans(Data[,
                       c("other_ego",
                         "other_IP",
                         "other_DRP",
                         "other_AEC",
                         "other_midia",
                         "other_halo",
                         "other_desc",
                         "other_rac")],na.rm=TRUE)
  

Data$PSO_Mean <- rowMeans(Data[,
                        c("OTHER_proc",
                          "OTHER_RF",
                          "OTHER_PO")],na.rm=TRUE)

# Difference tests (Compare the self-other discrepancy of biases to that of personal shortcomings.)
# calculate diff variables

Data$biasdiff = Data$BS_Mean  -  Data$BO_Mean
Data$opsdiff  = Data$PSS_Mean - Data$PSO_Mean
Data$diffdiff = Data$biasdiff - Data$opsdiff

utils::View(Data)

# # # # 3.2. Contrasting self vs others for biases, personal shortcomings # # # # #

# Descriptives for age of participants
psych::describe (subset(Data,select=c
                        ("Age",
                          "BS_Mean",
                          "BO_Mean",
                          "PSS_Mean",
                          "PSO_Mean",
                          "biasdiff",
                          "opsdiff",
                          "diffdiff")))

# Correlation Coefficient
bias <- cor(Data$BS_Mean, Data$BO_Mean)
ps <- cor(Data$PSS_Mean, Data$PSO_Mean)
diff <- cor(Data$biasdiff, Data$opsdiff)

print(bias)
print(ps)
print(diff)

# # HYPOTHESIS 1: asymmetry of bias between self and others
ttest1 <- t.test (Data$BS_Mean, Data$BO_Mean, 
                  alternative = "less",
                  paired = T,
                  var.equal = FALSE,
                  conf.level = 0.95)


#cohen's d
T1d <- effsize::cohen.d(Data$BS_Mean, Data$BO_Mean,
                        pooled=TRUE,
                        paired=TRUE,
                        na.rm=TRUE, 
                        conf.level=0.95,
                        noncentral=TRUE)

# Results Hypothesis 1
print(ttest1)
report(ttest1)
print(T1d)


# # HYPOTHESIS 2: asymmetry of Personal shortcomings between self and others
ttest2 <- t.test(Data$PSS_Mean, Data$PSO_Mean, 
                 paired = T, 
                 var.equal = FALSE, 
                 conf.level = 0.95)

#cohen's d
T2d <- effsize::cohen.d(Data$PSS_Mean, Data$PSO_Mean,
                        pooled=TRUE,
                        paired=TRUE,
                        na.rm=TRUE, 
                        conf.level=0.95,
                        noncentral=TRUE)

# Results Hypothesis 2
print(ttest2)
report(ttest2)
print(T2d)

# # HYPOTHESIS 3: contrast between difference in self-other bias and difference in self-other shortcomings
ttest3 <-  t.test(Data$biasdiff, Data$opsdiff,
                  paired = T,
                  var.equal = FALSE, 
                  conf.level = 0.95)


#cohen's d
T3d <- effsize::cohen.d(Data$biasdiff, Data$opsdiff,
                        pooled=TRUE,
                        paired=TRUE,
                        na.rm=TRUE, 
                        conf.level=0.95,
                        noncentral=TRUE)

# Results Hypothesis 3
print(ttest3)
report(ttest3)
print(T3d)



## Descriptive analysis of biases and personal shortcomings means (self and others)
{desc_means <- jmv::descriptives(
    data = Data,
    vars = c("BS_Mean","BO_Mean","PSS_Mean","PSO_Mean"),
    missing = FALSE,
    median = FALSE,
    min = FALSE,
    max = FALSE,
    sd = TRUE,
    se = FALSE,
    skew = TRUE,
    pcEqGr= FALSE,
    kurt = TRUE)
  desc_means}

## T-test of the eight biases and means (self and others)
{ttest_biases <- jmv::ttestPS(
  data = Data,
  pairs = list(
    list(i1="BS_Mean",i2="BO_Mean"),
    list(i1="self_ego",i2="other_ego"),
    list(i1="self_IP",i2="other_IP"),
    list(i1="self_DRP",i2="other_DRP"),
    list(i1="self_AEC",i2="other_AEC"),
    list(i1="self_midia",i2="other_midia"),
    list(i1="self_halo",i2="other_halo"),
    list(i1="self_desc",i2="other_desc"),
    list(i1="self_rac",i2="other_rac")),
  hypothesis = "twoGreater",
  meanDiff = TRUE,
  effectSize = TRUE,
  ci = FALSE,
  desc = FALSE,
  plots = FALSE)

    ttest_biases}  
    
###########################################
###               4. PLOTS              ###
###########################################    

# # # # 4.1. For visualization, convert the dataframe from wide form to long form # # # # #

long1sub <- subset(Data,select=c(  "self_ego",
                                   "self_IP",
                                   "self_DRP",
                                   "self_AEC",
                                   "self_midia",
                                   "self_halo",
                                   "self_desc",
                                   "self_rac",
                                   "SELF_proc",
                                   "SELF_RF",
                                   "SELF_PO",
                                              "other_ego",
                                              "other_IP",
                                              "other_DRP",
                                              "other_AEC",
                                              "other_midia",
                                              "other_halo",
                                              "other_desc",
                                              "other_rac",
                                              "OTHER_proc",
                                              "OTHER_RF",
                                              "OTHER_PO",
                                                          "BS_Mean",
                                                          "PSS_Mean",
                                                          "BO_Mean",
                                                          "PSO_Mean"))

long1sub <- as.data.frame(long1sub)

long1 <- reshape(long1sub, direction="long", 
               varying=list(c("self_ego","other_ego"),
                            c("self_IP","other_IP"),
                            c("self_DRP","other_DRP"),
                            c("self_AEC","other_AEC"),
                            c("self_midia","other_midia"),
                            c("self_halo","other_halo"),
                            c("self_desc","other_desc"),
                            c("self_rac","other_rac"),
                            c("SELF_proc","OTHER_proc"),
                            c("SELF_RF","OTHER_RF"),
                            c("SELF_PO","OTHER_PO"),
                            c("BS_Mean","BO_Mean"),
                            c("PSS_Mean","PSO_Mean")),
               v.names=c("selfserv",
                         "selfint",
                         "reactideval",
                         "FAE",
                         "hostmed",
                         "Halo",
                         "biassim",
                         "cogdis",
                         "procrast",
                         "FPS",
                         "Planfall",
                         "avg.bias8",
                         "avg.pershort"), timevar = "reference")


# Rename factor names from "1" and "2" to "self" and "other"
require(reshape2)
require(Rmisc)

long1$reference=as.factor(long1$reference)
str(long1$reference)
long1$reference<- factor(long1$reference,
                         levels = c(1,2),
                         labels = c("Self", "Others"))

long1=subset(long1,select=c("selfserv",
                            "selfint",
                            "reactideval",
                            "FAE",
                            "hostmed",
                            "Halo",
                            "biassim",
                            "cogdis",
                            "avg.bias8",
                            "avg.pershort",
                            "reference"))
melted <- reshape2::melt(long1, id.vars="reference")
means <- Rmisc::summarySE(melted, measurevar="value", groupvars=c("reference","variable"))

## This conversion will be used for the  "extension of asymmetry" plot
long1subv2=subset(Data,select=c("biasdiff","opsdiff"))
long1subv2<-as.data.frame(long1subv2)
long1v2= reshape(long1subv2,
                 direction="long",
                 varying=list(c("biasdiff","opsdiff")), 
                 v.names=c("diffdiff"),timevar="reference")

# Rename factor names from "1" and "2" to "self" and "other"
long1v2$reference<- factor(long1v2$reference,
                           levels = c(1,2),
                           labels = c("Bias", "Personal shortcomings"))

# # # # 4.2. Plots # # # # #
{require(ggpubr)
require(ggstatsplot)
require(ggplot2)}

# HYPOTHESIS 1: Self vs Other - comparison 8 biases plot

{vplot1 <- ggstatsplot::ggbetweenstats(data = long1,
  notch= TRUE,
  mean.plotting = TRUE,      # whether mean for each group is to be displayed 
  mean.ci = TRUE,            # whether to display confidence interval for means
  mean.label.size = 2.5,     # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = avg.bias8,
  title = "Eight biases",
  results.subtitle = FALSE,   # turn off the default subtitle
  subtitle =  ,               # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Susceptibility to Biases",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background =
                   element_blank(),
                   panel.grid.major = 
                   element_blank(), panel.grid.minor = 
                   element_blank(),
                   panel.border = 
                   element_blank(), axis.line = 
                   element_line()) + 
  ggplot2::scale_color_manual(values = c("#999999", "#999999"))
 vplot1}

# HYPOTHESIS 2: Self vs Other - Personal Shortcomings comparison
{vplot2 <-ggstatsplot::ggbetweenstats(data = long1,
  notch= TRUE,
  mean.plotting = TRUE,       # whether mean for each group is to be displayed 
  mean.ci = TRUE,             # whether to display confidence interval for means
  mean.label.size = 2.5,      # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = avg.pershort,
  title ="Personal Shortcomings" ,
  results.subtitle = FALSE,    # turn off the default subtitle
  subtitle =  ,                # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Perceived personal shortcomings",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = 
                   element_blank(),
                   panel.grid.major = 
                   element_blank(), panel.grid.minor = 
                   element_blank(),
                   panel.border = 
                   element_blank(), axis.line = 
                   element_line()) +
  ggplot2::scale_color_manual(values = c("#999999", "#999999"))
vplot2}

# HYPOTHESIS 3: comparison between asymmetry of biases asymmetry personal shortcomings.
{vplot3 <- ggstatsplot::ggbetweenstats(
  data = long1v2,
  notch= TRUE,
  mean.plotting = TRUE,       # whether mean for each group is to be displayed 
  mean.ci = TRUE,             # whether to display confidence interval for means
  mean.label.size = 2.5,      # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = diffdiff,
  title = "Asymmetry",
  results.subtitle = FALSE,   # turn off the default subtitle
  subtitle =  ,               # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Extent of Asymmetry",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = 
                 element_blank(),
                   panel.grid.major = 
                   element_blank(), panel.grid.minor = 
                   element_blank(),
                   panel.border = 
                   element_blank(), axis.line = 
                   element_line()) +
   ggplot2::scale_color_manual(values = c("#999999", "#999999"))
vplot3}

# This line will plot all three in the same page
ggpubr::ggarrange(vplot1, vplot2, vplot3, ncol = 3, nrow = 1)

# Barplot for the biases
{barplot1 <- ggplot (means, aes (x=variable, y=value, fill= factor(reference)))+
             geom_bar (stat="identity", position="dodge")+
             scale_fill_discrete (name="reference")+ 
             geom_errorbar (aes(ymin = value-se,
                                ymax = value+se),
                                width = .2,
                                position = position_dodge (.9))+ 
                                xlab ("") +
                                ylab ("Perceived susceptibility") + 
                                coord_cartesian (ylim=c(3,7)) + 
                                guides (fill = guide_legend (title = NULL))+
            theme (axis.text.x = element_text (angle = 90, hjust = 1, size=14, face="bold"),
                  axis.title.y = element_text (size=14,face="bold"))+
            theme (legend.text = element_text (size=14)) 

barplot1 + scale_x_discrete (labels = c("Self-serving",
                                       "Self-interest",
                                       "Reactive devaluation",
                                       "FAE","Hostile media",
                                       "Halo effect",
                                       "Assimilation Bias",
                                       "Cognitive dissonance",
                                       "8 biases (Average)",
                                       "Shortcomings (average)"))}
                                       
# Violin plot for each bias

s1avplot1 <- ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = selfserv,
  title = ,
  results.subtitle = FALSE,    # turn off the default subtitle
  subtitle =  ,                # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Self serving bias",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
   ggplot2::scale_color_manual(values = c("#999999", "#999999"))


s1avplot2 <-ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = selfint,
  title = ,
  results.subtitle = FALSE,           # turn off the default subtitle
  subtitle =  ,                       # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Self-interest bias",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
   ggplot2::scale_color_manual(values = c("#999999", "#999999")) 

s1avplot03 <-ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = reactideval,
  title = ,
  results.subtitle = FALSE,           # turn off the default subtitle
  subtitle =  ,        # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Reactive devaluation bias",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
   ggplot2::scale_color_manual(values = c("#999999", "#999999"))

s1avplot4 <-ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = FAE,
  title = ,
  results.subtitle = FALSE,           # turn off the default subtitle
  subtitle =  ,        # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Fundamental attribution error",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
  ggplot2::scale_color_manual(values = c("#999999", "#999999"))


s1avplot5 <- ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = hostmed,
  title = ,
  results.subtitle = FALSE,           # turn off the default subtitle
  subtitle =  ,        # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Hostile media",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
  ggplot2::scale_color_manual(values = c("#999999", "#999999"))


s1avplot6 <- ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = Halo,
  title = ,
  results.subtitle = FALSE,           # turn off the default subtitle
  subtitle =  ,        # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Halo effect",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
  ggplot2::scale_color_manual(values = c("#999999", "#999999"))

s1avplot7 <- ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = biassim,
  title = ,
  results.subtitle = FALSE,           # turn off the default subtitle
  subtitle =  ,        # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Assimilation Bias",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
  ggplot2::scale_color_manual(values = c("#999999", "#999999"))

s1avplot8 <- ggstatsplot::ggbetweenstats(
  data = long1,
  notch= TRUE,
  mean.plotting = TRUE,                           # whether mean for each group is to be displayed 
  mean.ci = TRUE,                                 # whether to display confidence interval for means
  mean.label.size = 2.5,                          # size of the label for mean
  plot.type = "boxviolin",
  x = reference,
  y = cogdis,
  title = ,
  results.subtitle = FALSE,           # turn off the default subtitle
  subtitle =  ,        # add the custom subtitle prepared using helper function
  messages = FALSE,
  sample.size.label= FALSE,
  ylab= "Cognitive dissonance",
  xlab= "",
  mean.color = "black") + 
  ggplot2::theme(legend.position = "none", panel.background = element_blank(),
                 panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
                 panel.border = element_blank(), axis.line = element_line()) +
   ggplot2::scale_color_manual(values = c("#999999", "#999999")) 


s1avplot1 # Self serving bias
s1avplot2 # Self-interest bias
s1avplot3 # Reactive devaluation bias
s1avplot4 # Fundamental attribution error
s1avplot5 # Hostile media
s1avplot6 # Halo effect
s1avplot7 # Assimilation Bias
s1avplot8 # Cognitive dissonance

# This code will arrange all plots into one single file
ggpubr::ggarrange(s1avplot1,	s1avplot2,	s1avplot3,	s1avplot4,	
s1avplot5,	s1avplot6,	s1avplot7,	s1avplot8, ncol = 4, nrow = 2)

# to cite the packages used: 
print(citation('tidyverse'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('osfr'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('readxl'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('psych'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('report'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('effsize'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('jmv'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('reshape2'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('Rmisc'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('ggstatsplot'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('ggplot2'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
print(citation('ggpubr'), bibtex=TRUE)
'options(citation.bibtex.max=999)'
